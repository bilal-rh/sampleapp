apiVersion: tekton.dev/v1
kind: Pipeline
metadata:

  labels:
    app.kubernetes.io/instance: sampleapp
    app.kubernetes.io/name: sampleapp
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    pipeline.openshift.io/runtime: dotnet
    pipeline.openshift.io/runtime-version: 8.0-ubi8
    pipeline.openshift.io/type: kubernetes
  managedFields:
    - apiVersion: tekton.dev/v1

  name: sampleapp
  namespace: mashraf-dev

spec:
  workspaces:
  - name: workspace  
  params:
    - default: sampleapp
      name: APP_NAME
      type: string
    - default: 'https://github.com/bilal-rh/sampleapp.git'
      name: GIT_REPO
      type: string
    - default: 'main'
      name: GIT_REVISION
      type: string
    - default: 'image-registry.openshift-image-registry.svc:5000/mashraf-dev/sampleapp'
      name: IMAGE_NAME
      type: string
    - default: 'sampleapp'
      name: PATH_CONTEXT
      type: string
    - default: 8.0-ubi8
      name: VERSION
      type: string
    - name: APP_IMAGE_TAG
      type: string
      description: The application image tag to build
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
        kind: ClusterTask
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: "true"
      workspaces:
        - name: output
          workspace: workspace
    
    
    - name: build-image
      taskRef:
        name: dotnet-build
      params:
      - name: deployment
        value: $(params.APP_NAME)
      - name: subdirectory
        value: $(params.PATH_CONTEXT)
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: workspace


    # - name: tag-image
      # taskRef:
      #   name: openshift-client
      #   kind: ClusterTask
      # runAfter:
      #   - build
      # params:

      #   - name: SCRIPT
      #     value: |
      #       #!/usr/bin/bash
      #       set +x
      #       set +v
      #       IMGT=$(params.APP_IMAGE_TAG)
      #       IMGTAG=${IMGT:0:10}
      #       echo "Tag image from latest to git commit hash taking first 10 digits of the hash ('$(params.APP_IMAGE_TAG)') "
      #       oc tag --alias=true $(params.APP_NAME):latest $(params.APP_NAME):$IMGTAG
      #       oc tag --alias=true $(params.APP_NAME):latest $(params.APP_NAME):latest1

    # - name: image-scan
    #   taskRef:
    #     name: rox-image-scan
    #     kind: ClusterTask
    #   params:
    #     - name: image
    #       value: docker.io/stackrox/kube-linter:0.2.2
    #     - name: rox_api_token
    #       value: roxsecrets
    #     - name: rox_central_endpoint
    #       value: roxsecrets
    #     - name: output_format
    #       value: pretty

    # - name: image-scan
    #   taskRef:
    #     name: rhacs-image-scan
    #     kind: Task
    #   workspaces:
    #   - name: roxctl-config
    #     workspace: workspace
    #   params:
    #   - name: image
    #     value: "$(params.IMAAGE_NAME)" 
    #     # @$(tasks.build-image.results.IMAGE_DIGEST)
    #   - name: rox_central_endpoint
    #     value: central.stackrox.svc:443
    #   - name: rox_config_dir
    #     value: /roxctl-config
    #   runAfter:
    #   - tag-image

    # - name: fetch-deploy-repository
    #   taskRef:
    #     name: git-clone
    #     kind: ClusterTask
    #   params:
    #     - name: url
    #       value: $(params.GIT_REPO)
    #     - name: revision
    #       value: $(params.GIT_REVISION)
    #     - name: subdirectory
    #       value: ''
    #     - name: deleteExisting
    #       value: "true"
    #   runAfter:
    #     - build
    #   workspaces:
    #     - name: output
    #       workspace: workspace


    # - name: apply-manifests
    #   taskRef:
    #     name: apply-manifests
    #   workspaces:
    #     - name: source
    #       workspace: workspace
    #   runAfter:
    #     - fetch-deploy-repository


    # - name: update-deployment
    #   taskRef:
    #     name: update-deployment
    #   params:
    #   - name: deployment
    #     value: $(params.APP_NAME)
    #   - name: IMAGE
    #     value: $(params.IMAGE_NAME)
    #   runAfter:
    #   - apply-manifests
# ---
# apiVersion: tekton.dev/v1beta1
# kind: Task
# metadata:
#   name: simple-publish
# spec:
#   resources:
#     inputs:
#       - name: source
#         type: git
#   steps:
#     - name: simple-dotnet-publish
#       image: registry.access.redhat.com/ubi8/dotnet-80:8.0-9 # .NET 8 SDK
#       securityContext:
#         runAsUser: 0  # UBI 8 images generally run as non-root
#       script: |
#           #!/usr/bin/bash
#           dotnet --info
#           cd source
#           dotnet publish -c Release -r linux-x64 --self-contained false "mvc_runtime_example.csproj"